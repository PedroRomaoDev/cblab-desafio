[
  {
    "id": "9722db32eabf9af3",
    "type": "tab",
    "label": "Simulação Ingestão Data Lake",
    "disabled": false,
    "info": "Este fluxo simula a chamada das APIs e o armazenamento no data lake."
  },
  {
    "id": "d08814f637759ab1",
    "type": "inject",
    "z": "9722db32eabf9af3",
    "name": "Disparar Ingestão Diária",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"busDt\":\"2020-07-31\", \"stores\":[\"store_007\", \"store_002\"]}",
    "payloadType": "json",
    "x": 150,
    "y": 140,
    "wires": [["448cb0703abd4688"]]
  },
  {
    "id": "448cb0703abd4688",
    "type": "function",
    "z": "9722db32eabf9af3",
    "name": "Preparar Chamadas API",
    "func": "const busDt = msg.payload.busDt;\nconst stores = msg.payload.stores;\n\nconst endpoints = [\n    \"/bi/getFiscalInvoice\",\n    \"/res/getGuestChecks\",\n    \"/org/getChargeBack\",\n    \"/trans/getTransactions\",\n    \"/inv/getCashManagementDetails\"\n];\n\nconst msgs = [];\n\nstores.forEach(storeId => {\n    endpoints.forEach(endpoint => {\n        msgs.push({\n            payload: {\n                busDt: busDt,\n                storeId: storeId\n            },\n            url: `http://api-server:3001${endpoint}`, \n            apiName: endpoint.split('/').pop() ,\n            busDt: busDt,     \n            storeId: storeId \n        });\n    });\n});\n\nmsg.payload = msgs; return msg",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 390,
    "y": 260,
    "wires": [["933eb5dd8f808392", "c4af3478e4cae3d2"]]
  },
  {
    "id": "03463646a0f7a00c",
    "type": "file",
    "z": "9722db32eabf9af3",
    "name": "Salvar no Data Lake",
    "filename": "filename",
    "filenameType": "msg",
    "appendNewline": false,
    "createDir": true,
    "overwriteFile": "false",
    "encoding": "utf8",
    "x": 1380,
    "y": 400,
    "wires": [["af13c3269dc123f7"]]
  },
  {
    "id": "af13c3269dc123f7",
    "type": "debug",
    "z": "9722db32eabf9af3",
    "name": "Debug",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1250,
    "y": 100,
    "wires": []
  },
  {
    "id": "8bf3596f473fc414",
    "type": "debug",
    "z": "9722db32eabf9af3",
    "name": "debugando",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 670,
    "y": 360,
    "wires": []
  },
  {
    "id": "933eb5dd8f808392",
    "type": "function",
    "z": "9722db32eabf9af3",
    "name": "Dividir Mensagens",
    "func": "// o nó 'Preparar Chamadas API' retorna um array de objetos...\n// onde cada objeto já é uma mensagem completa (com payload, url, apiName)\n// esse nó irá enviar cada elemento deste array como uma mensagem separada\n\nconst messages = msg.payload; // msg.payload é o array de mensagens\n\nif (!Array.isArray(messages)) {\n    node.error(\"Input to 'Dividir Mensagens' is not an array. Expected an array of message objects.\", msg);\n    return null; // retorna null para parar o fluxo em caso de erro\n}\n\n//itera sobre o array e envia cada objeto como uma nova mensagem\nfor (let i = 0; i < messages.length; i++) {\n    // pra cada objeto no array, cria uma nova mensagem e a envia\n    const newMessage = { ...messages[i] }; // copia o objeto para uma nova mensagem\n    node.send(newMessage);\n}\n\n// return null no final para indicar que todas as mensagens foram enviadas via node.send()\n// e que este nó não deve passar a mensagem original adiante automaticamente\nreturn null;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 630,
    "y": 140,
    "wires": [["8bf3596f473fc414", "fd9e4f9d88d6c383"]]
  },
  {
    "id": "c4af3478e4cae3d2",
    "type": "debug",
    "z": "9722db32eabf9af3",
    "name": "DEBUG SAIDA PREPARAR CHAMADAS",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 480,
    "y": 60,
    "wires": []
  },
  {
    "id": "d9586210e5b863c4",
    "type": "function",
    "z": "9722db32eabf9af3",
    "name": "Processar e Salvar Dados",
    "func": "const apiName = msg.apiName;\nconst busDt = msg.busDt; // pega diretamente da mensagem original\nconst storeId = msg.storeId; // pega diretamente da mensagem original\n\nif (!apiName || !busDt || !storeId) {\n    node.error(\"Missing apiName, busDt or storeId in msg for filename creation.\", msg);\n    return null;\n}\n\n// aqui: lógica para lidar com a mudança de esquema (guestChecks.taxes para guestChecks.taxation)\nif (apiName === 'getGuestChecks' && Array.isArray(msg.payload)) {\n    msg.payload = msg.payload.map(item => {\n        if (item.taxes !== undefined && item.taxation === undefined) {\n            item.taxation = item.taxes;\n            delete item.taxes;\n            node.warn(`Schema change: 'taxes' converted to 'taxation' for item ID: ${item.id}`);\n        }\n        return item;\n    });\n}\n\n// estrutura de pastas para o data lake simulado\nconst year = busDt.substring(0, 4);\nconst month = busDt.substring(5, 7);\nconst day = busDt.substring(8, 10);\n\nconst filePath = `/data/raw/${apiName}/${year}/${month}/${day}/${storeId}/data_${Date.now()}.json`;\n\nmsg.filename = filePath;\nmsg.payload = JSON.stringify(msg.payload, null, 2); // formatamos o JSON para salvar\n\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1050,
    "y": 320,
    "wires": [["03463646a0f7a00c", "af13c3269dc123f7"]]
  },
  {
    "id": "fd9e4f9d88d6c383",
    "type": "axios-request",
    "z": "9722db32eabf9af3",
    "name": "Chamar API (axios)",
    "endpoint": "fa43794ca8eb021d",
    "method": "post",
    "url": "{{msg.url}}",
    "responseType": "json",
    "keepAlive": false,
    "timeout": 30000,
    "validateStatus": true,
    "verboseOut": false,
    "headers": [
      {
        "keyType": "str",
        "keyValue": "Content-Type",
        "valueType": "str",
        "valueValue": "application/json"
      }
    ],
    "params": [],
    "x": 890,
    "y": 200,
    "wires": [["af13c3269dc123f7", "d9586210e5b863c4"]]
  },
  {
    "id": "fa43794ca8eb021d",
    "type": "axios-endpoint",
    "name": "API Express Server",
    "baseURL": "http://api-server:3001",
    "caCertPath": "",
    "rejectUnauthorized": true,
    "proxyEnabled": false,
    "proxyProtocol": "https",
    "proxyHost": "",
    "proxyPort": "",
    "apiKeyKey": "",
    "apiKeyAddTo": "headers"
  }
]
